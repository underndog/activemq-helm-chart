# Default values for active-mq.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: apache/activemq-artemis
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 2.39.0

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9404"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  runAsNonRoot: true
  runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  ports:
    - name: stomp
      port: 61613
      targetPort: 61613
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: web-console
      port: 8161
      targetPort: 8161
    - name: jmx
      port: 1099
      targetPort: 1099
    - name: rmi-registry
      port: 1098
      targetPort: 1098
    - name: core
      port: 61616
      targetPort: 61616

resources:
  requests:
    memory: "512Mi"
    cpu: "200m"
  limits:
    memory: "1Gi"
    cpu: "500m"

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /console/health
    port: 8161
  initialDelaySeconds: 30
  timeoutSeconds: 5
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /console/health
    port: 8161
  initialDelaySeconds: 30
  timeoutSeconds: 5
  periodSeconds: 10

triggerAuth:
  name: "activemq-auth"
  secretTargetRef:
    - parameter: username
      name: mdaas-secret
      key: ACTIVEMQ_USER
    - parameter: password
      name: mdaas-secret
      key: ACTIVEMQ_PASSWORD

# PVC configuration
persistence:
  enabled: true
  size: 10Gi
  storageClass: "gp3"

# Additional volumes on the output Deployment definition.
volumes:
  - name: artemis-config-volume
    configMap:
      name: activemq-config
  - name: artemis-persistent-storage
    persistentVolumeClaim:
      claimName: pvc-mdaas-activemq-artemis
  - name: jolokia-war
    emptyDir: {}

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: artemis-persistent-storage
    mountPath: /var/lib/artemis/data
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/broker.xml
    subPath: broker.xml
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/bootstrap.xml
    subPath: bootstrap.xml
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/management.xml
    subPath: management.xml
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/login.config
    subPath: login.config
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/artemis-users.properties
    subPath: artemis-users.properties
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/artemis-roles.properties
    subPath: artemis-roles.properties
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/jmx.access
    subPath: jmx-access.properties
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/jmx.password
    subPath: jmx-password.properties
  - name: artemis-config-volume
    mountPath: /var/lib/artemis/etc/broker.properties
    subPath: broker.properties
  - name: jolokia-war
    mountPath: /var/lib/artemis/web/jolokia.war
    subPath: jolokia.war

nodeSelector: {}

tolerations: []

affinity: {}


initContainers:
  - name: init-artemis-dirs
    image: busybox
    command: ['sh', '-c', 'mkdir -p /var/lib/artemis/data/journal /var/lib/artemis/data/bindings /var/lib/artemis/data/paging /var/lib/artemis/data/large-messages && chmod -R 777 /var/lib/artemis/data']
    volumeMounts:
    - name: artemis-persistent-storage
      mountPath: /var/lib/artemis/data
  - name: init-jolokia
    image: curlimages/curl:7.88.1
    command: ['sh', '-c', 'curl -L https://repo1.maven.org/maven2/org/jolokia/jolokia-war/1.7.2/jolokia-war-1.7.2.war -o /opt/jolokia/jolokia.war']
    volumeMounts:
    - name: jolokia-war
      mountPath: /opt/jolokia

